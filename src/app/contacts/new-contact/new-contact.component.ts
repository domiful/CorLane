import { Component, OnInit } from "@angular/core";
import { PageRoute, RouterExtensions } from "nativescript-angular/router";
import { switchMap } from "rxjs/operators";

import { Contact } from "../shared/contact.model";
import { ContactService } from "../shared/contact.service";

/* ***********************************************************
* This is the item details component in the master-detail structure.
* This component retrieves the passed parameter from the master list component,
* finds the data item by this parameter and displays the detailed data item information.
*************************************************************/
@Component({
    selector: "NewContact",
    moduleId: module.id,
    templateUrl: "./new-contact.component.html"
})
export class NewContactComponent implements OnInit {
    private _contact: Contact;

    constructor(
        private _contactService: ContactService,
        private _pageRoute: PageRoute,
        private _routerExtensions: RouterExtensions
    ) { }

    /* ***********************************************************
    * Use the "ngOnInit" handler to get the data item id parameter passed through navigation.
    * Get the data item details from the data service using this id and assign it to the
    * private property that holds it inside the component.
    *************************************************************/
    ngOnInit(): void {
        /* ***********************************************************
        * Learn more about how to get navigation parameters in this documentation article:
        * http://docs.nativescript.org/angular/core-concepts/angular-navigation.html#passing-parameter
        *************************************************************/

    }

    get contact(): Contact {
        return this._contact;
    }

    /* ***********************************************************
    * The back button is essential for a master-detail feature.
    *************************************************************/
    onBackButtonTap(): void {
        this._routerExtensions.backToPreviousPage();
    }

    /* ***********************************************************
    * The master-detail template comes with an example of an item edit page.
    * Check out the edit page in the /contacts/contact-detail-edit folder.
    *************************************************************/
    onEditButtonTap(): void {
        this._routerExtensions.navigate(["/contacts/contact-detail-edit", this._contact.id],
            {
                animated: true,
                transition: {
                    name: "slideTop",
                    duration: 200,
                    curve: "ease"
                }
            });
    }
}

/*//-------------------------------------------------------------------------
// Write your custom logic for NewContactViewComponent here.
// Changes to this file are preserved when the app regenerates.
// Find more information on https://devcenter.kinvey.com/guides/studio-extension-points.
//-------------------------------------------------------------------------
import { Inject, Injector } from '@angular/core';
import { NewContactViewBaseComponent } from "./new-contact/new-contact.base.component;

export class NewContactViewComponent extends NewContactViewBaseComponent {
    constructor(@Inject(Injector) injector: Injector) {
        super(injector);
    }
}

//-------------------------------------------------------------------------
// <Auto-generated file - do not modify!>
//
// This code was generated automatically by Kinvey Studio.
//
// Changes to this file may cause undesired behavior and will be lost
// the next time the code regenerates.
//
// You can write your custom code in the new-contact.component.tns.ts file instead.
// Find more information on https://devcenter.kinvey.com/guides/studio-extension-points.
//-------------------------------------------------------------------------
import { Component, Injector, OnInit } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import {
    KSFormComponent,
    FormControlOptions,
    getDefaultValidationMessages,
    getDefaultControlOptions
} from '@src/app/shared/components/mobile-form/form.component';
import { Page } from 'tns-core-modules/ui/page';
import { GestureTypes, SwipeDirection, SwipeGestureEventData } from 'tns-core-modules/ui/gestures';
import { ActivatedRoute } from '@angular/router';
import { map } from 'rxjs/operators';

import { NavigationService } from '@src/app/core/services/navigation.service';
import { UtilsService } from '@src/app/core/services/utils.service';
import { DataServiceFactory } from '@src/app/core/data/data-service.factory';
import { Kinvey } from 'kinvey-nativescript-sdk';
import { KinveyServiceConfig } from '@src/app/core/data/kinvey-service-config';
import { EntityDataService } from '@src/app/core/data/entity-data.service';
import { Contact } from '@src/app/data/contact.model';
import { getContactConfig } from '@src/app/data/contact.config';

@Component({
    templateUrl: './new-contact.component.html',
    styleUrls: ['./new-contact.component.css']
})
export class NewContactViewBaseComponent implements OnInit {
    public $config = {
        mobileform0: {
            validationMessages: getDefaultValidationMessages(),
            groups: {
                viewDataSource1FormGroup: {
                    name: getDefaultControlOptions(),
                    department: getDefaultControlOptions(),
                    jobTitle: getDefaultControlOptions(),
                    email: getDefaultControlOptions(),
                    phone: getDefaultControlOptions(),
                    cellphone: getDefaultControlOptions(),
                    address1: getDefaultControlOptions(),
                    address2: getDefaultControlOptions(),
                    city: getDefaultControlOptions(),
                    zip: getDefaultControlOptions()
                }
            }
        }
    };

    public $viewDataSource1Service: EntityDataService<Contact>;

    protected $activatedRoute: ActivatedRoute;
    protected $navigationService: NavigationService;
    protected $utilsService: UtilsService;
    protected $serviceFactory: DataServiceFactory;
    protected $page: Page;

    public $formBuilder: FormBuilder;
    public $viewDataSource1FormGroup: FormGroup;

    constructor(public injector: Injector) {
        this.$page = injector.get(Page);

        this.$formBuilder = injector.get(FormBuilder);
        this.$activatedRoute = injector.get(ActivatedRoute);
        this.$navigationService = injector.get(NavigationService);
        this.$utilsService = injector.get(UtilsService);
        this.$serviceFactory = injector.get(DataServiceFactory);

        const dataConfig = {
            viewDataSource1: getContactConfig()
        };
        dataConfig.viewDataSource1.dataStoreType = Kinvey.DataStoreType.Cache;

        this.initDataServices(dataConfig);

        this.$page.enableSwipeBackNavigation = false;
    }

    ngOnInit() {
        this.initFormGroups();
    }

    onViewLoaded({ object: view }) {
        if (view.swipeBound) {
            return;
        }

        const swipeHandler = ({ direction }: SwipeGestureEventData) => {
            if (direction === SwipeDirection.right) {
                this.$navigationService.goBack(this.$activatedRoute);
                return;
            }
        };

        view.on(GestureTypes.swipe, swipeHandler);
        view.swipeBound = true;
    }

    protected initDataServices(dataConfig: { [key: string]: KinveyServiceConfig }) {
        this.$viewDataSource1Service = this.$serviceFactory.entity<Contact>({ config: dataConfig.viewDataSource1, typeName: Contact.name });
        this.$viewDataSource1Service.dataState.onChanges(this.$viewDataSource1Service.mapParams(this.$activatedRoute.queryParams));
    }

    protected initFormGroups() {
        let name: FormControlOptions;
        let department: FormControlOptions;
        let jobTitle: FormControlOptions;
        let email: FormControlOptions;
        let phone: FormControlOptions;
        let cellphone: FormControlOptions;
        let address1: FormControlOptions;
        let address2: FormControlOptions;
        let city: FormControlOptions;
        let zip: FormControlOptions;

        ({
            name,
            department,
            jobTitle,
            email,
            phone,
            cellphone,
            address1,
            address2,
            city,
            zip
        } = this.$config.mobileform0.groups.viewDataSource1FormGroup);

        this.$viewDataSource1FormGroup = this.$formBuilder.group({
            name: [name.initial, name],
            department: [department.initial, department],
            jobTitle: [jobTitle.initial, jobTitle],
            email: [email.initial, email],
            phone: [phone.initial, phone],
            cellphone: [cellphone.initial, cellphone],
            address1: [address1.initial, address1],
            address2: [address2.initial, address2],
            city: [city.initial, city],
            zip: [zip.initial, zip]
        });
    }
}
*/